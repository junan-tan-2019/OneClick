version: "3.8"

volumes:
  rabbitmq_data:

services:

  ####################################
  # MySQL: SQL database  
  ####################################
  mysql:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - ./schemas.sql:/docker-entrypoint-initdb.d/schemas.sql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    

  ####################################
  # service0: 
  ####################################
  service-0:
    build:
      context: ./services/service0
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mysql
    env_file:
      - 'dev.env'
    ports:
      - 31000:5000


  ####################################
  # service1: 
  ####################################
  service-1:
    build:
      context: ./services/service1
      dockerfile: Dockerfile
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
      mysql:
        condition: service_healthy
    env_file:
      - 'dev.env'
    ports:
      - 30000:3000
    command : ["./wait-for-it.sh", "-t", "20", "mysql:3306", "--", "node", "app.js"]

  ####################################
  # service2: Using lambda service in AWS
  ####################################


  ###################################
  # service3: 
  ###################################
  service-3:
    build:
      context: ./services/service3
      dockerfile: Dockerfile
    restart: always
    ports:
      - 33000:5000


  ###################################
  # service4: 
  ###################################
  service-4:
    build:
      context: ./services/service4/service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - mysql
    env_file:
      - 'dev.env'
    ports:
      - 32000:8080

  ####################################
  # service4 collection receiver: 
  ####################################
  service-4-receiver:
    build:
      context: ./services/service4/receiver
      dockerfile: Dockerfile
    restart: always
    depends_on: 
      - rabbitmq
      - mysql
    env_file:
      - 'dev.env'
    environment:
      PYTHONUNBUFFERED: 1